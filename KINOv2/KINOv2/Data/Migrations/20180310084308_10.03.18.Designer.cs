// <auto-generated />
using KINOv2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace KINOv2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180310084308_10.03.18")]
    partial class _100318
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("KINOv2.Models.AdditionalEFEntities.FilmUser", b =>
                {
                    b.Property<string>("ApplicationUserId");

                    b.Property<int?>("FilmLINK");

                    b.HasKey("ApplicationUserId", "FilmLINK");

                    b.HasIndex("FilmLINK");

                    b.ToTable("FilmUser");
                });

            modelBuilder.Entity("KINOv2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("Age");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<bool?>("PersonalInfoVisible");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImage");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool?>("SelectedFilmsVisible");

                    b.Property<string>("SurName");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Comment", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int?>("BaseCommentLINK");

                    b.Property<DateTime?>("Date");

                    b.Property<int?>("FilmLINK");

                    b.Property<string>("Text");

                    b.HasKey("LINK");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BaseCommentLINK");

                    b.HasIndex("FilmLINK");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Film", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgeLimitLINK");

                    b.Property<bool?>("Archived");

                    b.Property<int?>("CountryLINK");

                    b.Property<string>("Description");

                    b.Property<int?>("DirectorLINK");

                    b.Property<string>("Duration")
                        .IsRequired();

                    b.Property<int?>("GenreLINK");

                    b.Property<int?>("GlobalRating");

                    b.Property<int?>("LocalRating");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Poster")
                        .IsRequired();

                    b.Property<int>("ReleaseYear");

                    b.Property<string>("TrailerLink");

                    b.HasKey("LINK");

                    b.HasIndex("AgeLimitLINK");

                    b.HasIndex("CountryLINK");

                    b.HasIndex("DirectorLINK");

                    b.HasIndex("GenreLINK");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Order", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("Cost");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("ValidationKey");

                    b.HasKey("LINK");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Rating", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<int?>("CommentLINK");

                    b.Property<int?>("FilmLINK");

                    b.Property<double>("Value");

                    b.HasKey("LINK");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommentLINK");

                    b.HasIndex("FilmLINK");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Seat", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsBooked");

                    b.Property<int>("Number");

                    b.Property<int?>("OrderLINK");

                    b.Property<int>("Row");

                    b.Property<int?>("SessionLINK");

                    b.HasKey("LINK");

                    b.HasIndex("OrderLINK");

                    b.HasIndex("SessionLINK");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Session", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Archived");

                    b.Property<int>("Cost");

                    b.Property<int?>("FilmLINK")
                        .IsRequired();

                    b.Property<int?>("HallLINK")
                        .IsRequired();

                    b.Property<DateTime>("SessionTime");

                    b.HasKey("LINK");

                    b.HasIndex("FilmLINK");

                    b.HasIndex("HallLINK");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("KINOv2.Models.ReferenceBooks.AgeLimit", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amout");

                    b.Property<string>("Value");

                    b.HasKey("LINK");

                    b.ToTable("AgeLimits");
                });

            modelBuilder.Entity("KINOv2.Models.ReferenceBooks.Country", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("LINK");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("KINOv2.Models.ReferenceBooks.Director", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("LINK");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("KINOv2.Models.ReferenceBooks.Genre", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("LINK");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("KINOv2.Models.ReferenceBooks.Hall", b =>
                {
                    b.Property<int>("LINK")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<int>("SeatsNumber");

                    b.HasKey("LINK");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("KINOv2.Models.AdditionalEFEntities.FilmUser", b =>
                {
                    b.HasOne("KINOv2.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("FilmUsers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KINOv2.Models.MainModels.Film", "Film")
                        .WithMany("FilmUsers")
                        .HasForeignKey("FilmLINK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Comment", b =>
                {
                    b.HasOne("KINOv2.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("KINOv2.Models.MainModels.Comment", "BaseComment")
                        .WithMany()
                        .HasForeignKey("BaseCommentLINK");

                    b.HasOne("KINOv2.Models.MainModels.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmLINK");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Film", b =>
                {
                    b.HasOne("KINOv2.Models.ReferenceBooks.AgeLimit", "AgeLimit")
                        .WithMany()
                        .HasForeignKey("AgeLimitLINK");

                    b.HasOne("KINOv2.Models.ReferenceBooks.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryLINK");

                    b.HasOne("KINOv2.Models.ReferenceBooks.Director", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorLINK");

                    b.HasOne("KINOv2.Models.ReferenceBooks.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreLINK");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Order", b =>
                {
                    b.HasOne("KINOv2.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Rating", b =>
                {
                    b.HasOne("KINOv2.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("KINOv2.Models.MainModels.Comment")
                        .WithMany("Rating")
                        .HasForeignKey("CommentLINK");

                    b.HasOne("KINOv2.Models.MainModels.Film")
                        .WithMany("Rating")
                        .HasForeignKey("FilmLINK");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Seat", b =>
                {
                    b.HasOne("KINOv2.Models.MainModels.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderLINK");

                    b.HasOne("KINOv2.Models.MainModels.Session", "Session")
                        .WithMany("Seats")
                        .HasForeignKey("SessionLINK");
                });

            modelBuilder.Entity("KINOv2.Models.MainModels.Session", b =>
                {
                    b.HasOne("KINOv2.Models.MainModels.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmLINK")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KINOv2.Models.ReferenceBooks.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallLINK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KINOv2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KINOv2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KINOv2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KINOv2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
